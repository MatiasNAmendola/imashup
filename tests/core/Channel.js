dojo.provide("imashup.tests.core.Channel");dojo.require("dijit._Widget");dojo.require("imashup.core.all");tests.register("imashup.tests.core.Channel", [		function test_basic_functions(t) {			var channelManager = imashup.core.channelManager;			channelManager.newChannel("c0");			var channel = channelManager.channels["c0"];			t.t(channel != null);			// Register a type of implementation for testing			dojo.declare("imp", dijit._Widget, {				func : function() {				}			});			var option = {				impl_name : "imp",				interface : {					properties : {},					methods : {},					events : {}				}			};			var ctm = imashup.core.componentTypeManager;			ctm.registerComponentType(option);			// Create instances			channelManager.instanceManager.create("imp", {				id : "i_1"			});			channelManager.instanceManager.create("imp", {				id : "i_2"			});			// Set publishers and recievers			channel.addPublisher("i_1", "func");			channel.addReciever("i_2", "func");			// Test setting publishers and recievers			t.t(channel.publishers["i_1.func"] != null);			t.is("i_1", channel.publishers["i_1.func"].pID);			t.is("func", channel.publishers["i_1.func"].func);			t.t(channel.recievers["i_2.func"] != null);			t.is("i_2", channel.recievers["i_2.func"].rID);			t.is("func", channel.recievers["i_2.func"].func);			// Test removing publishers and recievers			channel.removePublisher("i_1.func");			channel.removeReciever("i_2.func");			t.t(channel.publishers["i_1.func"] == null);			t.t(channel.recievers["i_2.func"] == null);			channelManager.deleteChannel("c0");			channelManager.instanceManager.destroy("i_1");			channelManager.instanceManager.destroy("i_2");		},		function test_connection(t) {			var channelManager = imashup.core.channelManager;			channelManager.newChannel("c0");			var channel = channelManager.channels["c0"];			t.t(channel != null);			// Register a type of implementation for testing			dojo.declare("implementation", dijit._Widget, {				func : function() {				}			});			var option = {				impl_name : "implementation",				interface : {					properties : {},					methods : {},					events : {}				}			};			var ctm = imashup.core.componentTypeManager;			ctm.registerComponentType(option);			// Create instances			var ins_1 = channelManager.instanceManager.create("implementation",					{						id : "i_1"					});			var ins_2 = channelManager.instanceManager.create("implementation",					{						id : "i_2"					});			var ins_3 = channelManager.instanceManager.create("implementation",					{						id : "i_3"					});			var ins_4 = channelManager.instanceManager.create("implementation",					{						id : "i_4"					});			// Set publishers and recievers			channel.addPublisher("i_1", "func");			channel.addPublisher("i_2", "func");			channel.addReciever("i_3", "func");			channel.addReciever("i_4", "func");			// Sample Arguments			var arg_1 = new Array(1, "Hello", null);			var arg_2 = new Array(10.500, true);			var arg_3 = new Array();			var arg_4 = new Array();			var connection_3 = dojo.connect(ins_3, "func", function() {				arg_3 = new Array();				for ( var i = 0; i < arguments.length; i++) {					arg_3[i] = arguments[i];				}			})			var connection_4 = dojo.connect(ins_4, "func", function() {				arg_4 = new Array();				for ( var i = 0; i < arguments.length; i++)					arg_4[i] = arguments[i];			})			// Argument test function			var test_args = function(/* Array */args1, /* Array */args2) {				for ( var i = 0; i < args1.length; i++) {					t.is(args1[i], args2[i]); // Plan A					if (args1[i] != args2[i])						return false; // Plan B				}				return true;			}			// Test connections			ins_1.func(arg_1[0], arg_1[1], arg_1[2]);			test_args(arg_1, arg_3);			test_args(arg_1, arg_4);			ins_2.func(arg_2[0], arg_2[1]);			test_args(arg_2, arg_3);			test_args(arg_2, arg_4);			// Test removing publishers and recievers			channel.removePublisher("i_1.func");			channel.removeReciever("i_3.func");			ins_1.func(arg_1[0], arg_1[1], arg_1[2]);			test_args(arg_2, arg_3);			test_args(arg_2, arg_4);			ins_2.func(arg_1[0], arg_1[1], arg_1[2]);			test_args(arg_2, arg_3);			test_args(arg_1, arg_4);			// Test removing channel			channelManager.deleteChannel("c0");			ins_2.func(arg_2[0], arg_2[1]);			test_args(arg_1, arg_4);			dojo.disconnect(connection_3);			dojo.disconnect(connection_4);			channelManager.instanceManager.destroy(ins_1.id);			channelManager.instanceManager.destroy(ins_2.id);			channelManager.instanceManager.destroy(ins_3.id);			channelManager.instanceManager.destroy(ins_4.id);		} ]);